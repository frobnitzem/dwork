// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TaskMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TaskMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TaskMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TaskMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace dwork {
class QueryMsg;
class QueryMsgDefaultTypeInternal;
extern QueryMsgDefaultTypeInternal _QueryMsg_default_instance_;
class TaskMsg;
class TaskMsgDefaultTypeInternal;
extern TaskMsgDefaultTypeInternal _TaskMsg_default_instance_;
class TaskMsg_Dep;
class TaskMsg_DepDefaultTypeInternal;
extern TaskMsg_DepDefaultTypeInternal _TaskMsg_Dep_default_instance_;
class TaskMsg_LogMsg;
class TaskMsg_LogMsgDefaultTypeInternal;
extern TaskMsg_LogMsgDefaultTypeInternal _TaskMsg_LogMsg_default_instance_;
}  // namespace dwork
PROTOBUF_NAMESPACE_OPEN
template<> ::dwork::QueryMsg* Arena::CreateMaybeMessage<::dwork::QueryMsg>(Arena*);
template<> ::dwork::TaskMsg* Arena::CreateMaybeMessage<::dwork::TaskMsg>(Arena*);
template<> ::dwork::TaskMsg_Dep* Arena::CreateMaybeMessage<::dwork::TaskMsg_Dep>(Arena*);
template<> ::dwork::TaskMsg_LogMsg* Arena::CreateMaybeMessage<::dwork::TaskMsg_LogMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dwork {

enum TaskMsg_State : int {
  TaskMsg_State_Pending = 0,
  TaskMsg_State_Stolen = 1,
  TaskMsg_State_Waiting = 2,
  TaskMsg_State_Copying = 3,
  TaskMsg_State_Ready = 4,
  TaskMsg_State_Started = 5,
  TaskMsg_State_Done = 6,
  TaskMsg_State_Recorded = 7
};
bool TaskMsg_State_IsValid(int value);
constexpr TaskMsg_State TaskMsg_State_State_MIN = TaskMsg_State_Pending;
constexpr TaskMsg_State TaskMsg_State_State_MAX = TaskMsg_State_Recorded;
constexpr int TaskMsg_State_State_ARRAYSIZE = TaskMsg_State_State_MAX + 1;

const std::string& TaskMsg_State_Name(TaskMsg_State value);
template<typename T>
inline const std::string& TaskMsg_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskMsg_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskMsg_State_Name.");
  return TaskMsg_State_Name(static_cast<TaskMsg_State>(enum_t_value));
}
bool TaskMsg_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskMsg_State* value);
enum QueryMsg_Type : int {
  QueryMsg_Type_Create = 0,
  QueryMsg_Type_Steal = 1,
  QueryMsg_Type_Complete = 2,
  QueryMsg_Type_Transfer = 3,
  QueryMsg_Type_Lookup = 4,
  QueryMsg_Type_NotFound = 5,
  QueryMsg_Type_OK = 6,
  QueryMsg_Type_Exit = 7,
  QueryMsg_Type_Error = 8
};
bool QueryMsg_Type_IsValid(int value);
constexpr QueryMsg_Type QueryMsg_Type_Type_MIN = QueryMsg_Type_Create;
constexpr QueryMsg_Type QueryMsg_Type_Type_MAX = QueryMsg_Type_Error;
constexpr int QueryMsg_Type_Type_ARRAYSIZE = QueryMsg_Type_Type_MAX + 1;

const std::string& QueryMsg_Type_Name(QueryMsg_Type value);
template<typename T>
inline const std::string& QueryMsg_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryMsg_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryMsg_Type_Name.");
  return QueryMsg_Type_Name(static_cast<QueryMsg_Type>(enum_t_value));
}
bool QueryMsg_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QueryMsg_Type* value);
// ===================================================================

class TaskMsg_Dep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dwork.TaskMsg.Dep) */ {
 public:
  inline TaskMsg_Dep() : TaskMsg_Dep(nullptr) {}
  virtual ~TaskMsg_Dep();

  TaskMsg_Dep(const TaskMsg_Dep& from);
  TaskMsg_Dep(TaskMsg_Dep&& from) noexcept
    : TaskMsg_Dep() {
    *this = ::std::move(from);
  }

  inline TaskMsg_Dep& operator=(const TaskMsg_Dep& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskMsg_Dep& operator=(TaskMsg_Dep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskMsg_Dep& default_instance();

  static inline const TaskMsg_Dep* internal_default_instance() {
    return reinterpret_cast<const TaskMsg_Dep*>(
               &_TaskMsg_Dep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskMsg_Dep& a, TaskMsg_Dep& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskMsg_Dep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskMsg_Dep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskMsg_Dep* New() const final {
    return CreateMaybeMessage<TaskMsg_Dep>(nullptr);
  }

  TaskMsg_Dep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskMsg_Dep>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskMsg_Dep& from);
  void MergeFrom(const TaskMsg_Dep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskMsg_Dep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwork.TaskMsg.Dep";
  }
  protected:
  explicit TaskMsg_Dep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:dwork.TaskMsg.Dep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  friend struct ::TableStruct_TaskMsg_2eproto;
};
// -------------------------------------------------------------------

class TaskMsg_LogMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dwork.TaskMsg.LogMsg) */ {
 public:
  inline TaskMsg_LogMsg() : TaskMsg_LogMsg(nullptr) {}
  virtual ~TaskMsg_LogMsg();

  TaskMsg_LogMsg(const TaskMsg_LogMsg& from);
  TaskMsg_LogMsg(TaskMsg_LogMsg&& from) noexcept
    : TaskMsg_LogMsg() {
    *this = ::std::move(from);
  }

  inline TaskMsg_LogMsg& operator=(const TaskMsg_LogMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskMsg_LogMsg& operator=(TaskMsg_LogMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskMsg_LogMsg& default_instance();

  static inline const TaskMsg_LogMsg* internal_default_instance() {
    return reinterpret_cast<const TaskMsg_LogMsg*>(
               &_TaskMsg_LogMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskMsg_LogMsg& a, TaskMsg_LogMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskMsg_LogMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskMsg_LogMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskMsg_LogMsg* New() const final {
    return CreateMaybeMessage<TaskMsg_LogMsg>(nullptr);
  }

  TaskMsg_LogMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskMsg_LogMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskMsg_LogMsg& from);
  void MergeFrom(const TaskMsg_LogMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskMsg_LogMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwork.TaskMsg.LogMsg";
  }
  protected:
  explicit TaskMsg_LogMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // required int64 time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .dwork.TaskMsg.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::dwork::TaskMsg_State state() const;
  void set_state(::dwork::TaskMsg_State value);
  private:
  ::dwork::TaskMsg_State _internal_state() const;
  void _internal_set_state(::dwork::TaskMsg_State value);
  public:

  // @@protoc_insertion_point(class_scope:dwork.TaskMsg.LogMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  int state_;
  friend struct ::TableStruct_TaskMsg_2eproto;
};
// -------------------------------------------------------------------

class TaskMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dwork.TaskMsg) */ {
 public:
  inline TaskMsg() : TaskMsg(nullptr) {}
  virtual ~TaskMsg();

  TaskMsg(const TaskMsg& from);
  TaskMsg(TaskMsg&& from) noexcept
    : TaskMsg() {
    *this = ::std::move(from);
  }

  inline TaskMsg& operator=(const TaskMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskMsg& operator=(TaskMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TaskMsg& default_instance();

  static inline const TaskMsg* internal_default_instance() {
    return reinterpret_cast<const TaskMsg*>(
               &_TaskMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskMsg& a, TaskMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskMsg* New() const final {
    return CreateMaybeMessage<TaskMsg>(nullptr);
  }

  TaskMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskMsg& from);
  void MergeFrom(const TaskMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwork.TaskMsg";
  }
  protected:
  explicit TaskMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TaskMsg_Dep Dep;
  typedef TaskMsg_LogMsg LogMsg;

  typedef TaskMsg_State State;
  static constexpr State Pending =
    TaskMsg_State_Pending;
  static constexpr State Stolen =
    TaskMsg_State_Stolen;
  static constexpr State Waiting =
    TaskMsg_State_Waiting;
  static constexpr State Copying =
    TaskMsg_State_Copying;
  static constexpr State Ready =
    TaskMsg_State_Ready;
  static constexpr State Started =
    TaskMsg_State_Started;
  static constexpr State Done =
    TaskMsg_State_Done;
  static constexpr State Recorded =
    TaskMsg_State_Recorded;
  static inline bool State_IsValid(int value) {
    return TaskMsg_State_IsValid(value);
  }
  static constexpr State State_MIN =
    TaskMsg_State_State_MIN;
  static constexpr State State_MAX =
    TaskMsg_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    TaskMsg_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return TaskMsg_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return TaskMsg_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPredFieldNumber = 4,
    kSuccFieldNumber = 5,
    kLogFieldNumber = 6,
    kNameFieldNumber = 1,
    kOriginFieldNumber = 2,
  };
  // repeated .dwork.TaskMsg.Dep pred = 4;
  int pred_size() const;
  private:
  int _internal_pred_size() const;
  public:
  void clear_pred();
  ::dwork::TaskMsg_Dep* mutable_pred(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >*
      mutable_pred();
  private:
  const ::dwork::TaskMsg_Dep& _internal_pred(int index) const;
  ::dwork::TaskMsg_Dep* _internal_add_pred();
  public:
  const ::dwork::TaskMsg_Dep& pred(int index) const;
  ::dwork::TaskMsg_Dep* add_pred();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >&
      pred() const;

  // repeated .dwork.TaskMsg.Dep succ = 5;
  int succ_size() const;
  private:
  int _internal_succ_size() const;
  public:
  void clear_succ();
  ::dwork::TaskMsg_Dep* mutable_succ(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >*
      mutable_succ();
  private:
  const ::dwork::TaskMsg_Dep& _internal_succ(int index) const;
  ::dwork::TaskMsg_Dep* _internal_add_succ();
  public:
  const ::dwork::TaskMsg_Dep& succ(int index) const;
  ::dwork::TaskMsg_Dep* add_succ();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >&
      succ() const;

  // repeated .dwork.TaskMsg.LogMsg log = 6;
  int log_size() const;
  private:
  int _internal_log_size() const;
  public:
  void clear_log();
  ::dwork::TaskMsg_LogMsg* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_LogMsg >*
      mutable_log();
  private:
  const ::dwork::TaskMsg_LogMsg& _internal_log(int index) const;
  ::dwork::TaskMsg_LogMsg* _internal_add_log();
  public:
  const ::dwork::TaskMsg_LogMsg& log(int index) const;
  ::dwork::TaskMsg_LogMsg* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_LogMsg >&
      log() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string origin = 2;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // @@protoc_insertion_point(class_scope:dwork.TaskMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep > pred_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep > succ_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_LogMsg > log_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  friend struct ::TableStruct_TaskMsg_2eproto;
};
// -------------------------------------------------------------------

class QueryMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dwork.QueryMsg) */ {
 public:
  inline QueryMsg() : QueryMsg(nullptr) {}
  virtual ~QueryMsg();

  QueryMsg(const QueryMsg& from);
  QueryMsg(QueryMsg&& from) noexcept
    : QueryMsg() {
    *this = ::std::move(from);
  }

  inline QueryMsg& operator=(const QueryMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMsg& operator=(QueryMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const QueryMsg& default_instance();

  static inline const QueryMsg* internal_default_instance() {
    return reinterpret_cast<const QueryMsg*>(
               &_QueryMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryMsg& a, QueryMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryMsg* New() const final {
    return CreateMaybeMessage<QueryMsg>(nullptr);
  }

  QueryMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QueryMsg& from);
  void MergeFrom(const QueryMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dwork.QueryMsg";
  }
  protected:
  explicit QueryMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef QueryMsg_Type Type;
  static constexpr Type Create =
    QueryMsg_Type_Create;
  static constexpr Type Steal =
    QueryMsg_Type_Steal;
  static constexpr Type Complete =
    QueryMsg_Type_Complete;
  static constexpr Type Transfer =
    QueryMsg_Type_Transfer;
  static constexpr Type Lookup =
    QueryMsg_Type_Lookup;
  static constexpr Type NotFound =
    QueryMsg_Type_NotFound;
  static constexpr Type OK =
    QueryMsg_Type_OK;
  static constexpr Type Exit =
    QueryMsg_Type_Exit;
  static constexpr Type Error =
    QueryMsg_Type_Error;
  static inline bool Type_IsValid(int value) {
    return QueryMsg_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    QueryMsg_Type_Type_MIN;
  static constexpr Type Type_MAX =
    QueryMsg_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    QueryMsg_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return QueryMsg_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return QueryMsg_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kNameFieldNumber = 3,
    kLocationFieldNumber = 6,
    kTypeFieldNumber = 1,
    kNFieldNumber = 4,
  };
  // repeated .dwork.TaskMsg task = 2;
  int task_size() const;
  private:
  int _internal_task_size() const;
  public:
  void clear_task();
  ::dwork::TaskMsg* mutable_task(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg >*
      mutable_task();
  private:
  const ::dwork::TaskMsg& _internal_task(int index) const;
  ::dwork::TaskMsg* _internal_add_task();
  public:
  const ::dwork::TaskMsg& task(int index) const;
  ::dwork::TaskMsg* add_task();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg >&
      task() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string location = 6;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // required .dwork.QueryMsg.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::dwork::QueryMsg_Type type() const;
  void set_type(::dwork::QueryMsg_Type value);
  private:
  ::dwork::QueryMsg_Type _internal_type() const;
  void _internal_set_type(::dwork::QueryMsg_Type value);
  public:

  // optional int32 n = 4;
  bool has_n() const;
  private:
  bool _internal_has_n() const;
  public:
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dwork.QueryMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg > task_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  friend struct ::TableStruct_TaskMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskMsg_Dep

// required string name = 1;
inline bool TaskMsg_Dep::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskMsg_Dep::has_name() const {
  return _internal_has_name();
}
inline void TaskMsg_Dep::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskMsg_Dep::name() const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.Dep.name)
  return _internal_name();
}
inline void TaskMsg_Dep::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dwork.TaskMsg.Dep.name)
}
inline std::string* TaskMsg_Dep::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dwork.TaskMsg.Dep.name)
  return _internal_mutable_name();
}
inline const std::string& TaskMsg_Dep::_internal_name() const {
  return name_.Get();
}
inline void TaskMsg_Dep::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskMsg_Dep::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dwork.TaskMsg.Dep.name)
}
inline void TaskMsg_Dep::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dwork.TaskMsg.Dep.name)
}
inline void TaskMsg_Dep::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dwork.TaskMsg.Dep.name)
}
inline std::string* TaskMsg_Dep::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskMsg_Dep::release_name() {
  // @@protoc_insertion_point(field_release:dwork.TaskMsg.Dep.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskMsg_Dep::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dwork.TaskMsg.Dep.name)
}

// optional string location = 2;
inline bool TaskMsg_Dep::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskMsg_Dep::has_location() const {
  return _internal_has_location();
}
inline void TaskMsg_Dep::clear_location() {
  location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskMsg_Dep::location() const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.Dep.location)
  return _internal_location();
}
inline void TaskMsg_Dep::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:dwork.TaskMsg.Dep.location)
}
inline std::string* TaskMsg_Dep::mutable_location() {
  // @@protoc_insertion_point(field_mutable:dwork.TaskMsg.Dep.location)
  return _internal_mutable_location();
}
inline const std::string& TaskMsg_Dep::_internal_location() const {
  return location_.Get();
}
inline void TaskMsg_Dep::_internal_set_location(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskMsg_Dep::set_location(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dwork.TaskMsg.Dep.location)
}
inline void TaskMsg_Dep::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dwork.TaskMsg.Dep.location)
}
inline void TaskMsg_Dep::set_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dwork.TaskMsg.Dep.location)
}
inline std::string* TaskMsg_Dep::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskMsg_Dep::release_location() {
  // @@protoc_insertion_point(field_release:dwork.TaskMsg.Dep.location)
  if (!_internal_has_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskMsg_Dep::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dwork.TaskMsg.Dep.location)
}

// -------------------------------------------------------------------

// TaskMsg_LogMsg

// required .dwork.TaskMsg.State state = 1;
inline bool TaskMsg_LogMsg::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskMsg_LogMsg::has_state() const {
  return _internal_has_state();
}
inline void TaskMsg_LogMsg::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::dwork::TaskMsg_State TaskMsg_LogMsg::_internal_state() const {
  return static_cast< ::dwork::TaskMsg_State >(state_);
}
inline ::dwork::TaskMsg_State TaskMsg_LogMsg::state() const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.LogMsg.state)
  return _internal_state();
}
inline void TaskMsg_LogMsg::_internal_set_state(::dwork::TaskMsg_State value) {
  assert(::dwork::TaskMsg_State_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
}
inline void TaskMsg_LogMsg::set_state(::dwork::TaskMsg_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:dwork.TaskMsg.LogMsg.state)
}

// required int64 time = 2;
inline bool TaskMsg_LogMsg::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskMsg_LogMsg::has_time() const {
  return _internal_has_time();
}
inline void TaskMsg_LogMsg::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskMsg_LogMsg::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskMsg_LogMsg::time() const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.LogMsg.time)
  return _internal_time();
}
inline void TaskMsg_LogMsg::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void TaskMsg_LogMsg::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:dwork.TaskMsg.LogMsg.time)
}

// -------------------------------------------------------------------

// TaskMsg

// required string name = 1;
inline bool TaskMsg::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskMsg::has_name() const {
  return _internal_has_name();
}
inline void TaskMsg::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskMsg::name() const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.name)
  return _internal_name();
}
inline void TaskMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dwork.TaskMsg.name)
}
inline std::string* TaskMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dwork.TaskMsg.name)
  return _internal_mutable_name();
}
inline const std::string& TaskMsg::_internal_name() const {
  return name_.Get();
}
inline void TaskMsg::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskMsg::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dwork.TaskMsg.name)
}
inline void TaskMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dwork.TaskMsg.name)
}
inline void TaskMsg::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dwork.TaskMsg.name)
}
inline std::string* TaskMsg::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskMsg::release_name() {
  // @@protoc_insertion_point(field_release:dwork.TaskMsg.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dwork.TaskMsg.name)
}

// required string origin = 2;
inline bool TaskMsg::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskMsg::has_origin() const {
  return _internal_has_origin();
}
inline void TaskMsg::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskMsg::origin() const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.origin)
  return _internal_origin();
}
inline void TaskMsg::set_origin(const std::string& value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:dwork.TaskMsg.origin)
}
inline std::string* TaskMsg::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:dwork.TaskMsg.origin)
  return _internal_mutable_origin();
}
inline const std::string& TaskMsg::_internal_origin() const {
  return origin_.Get();
}
inline void TaskMsg::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskMsg::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dwork.TaskMsg.origin)
}
inline void TaskMsg::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dwork.TaskMsg.origin)
}
inline void TaskMsg::set_origin(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dwork.TaskMsg.origin)
}
inline std::string* TaskMsg::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000002u;
  return origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskMsg::release_origin() {
  // @@protoc_insertion_point(field_release:dwork.TaskMsg.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return origin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskMsg::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dwork.TaskMsg.origin)
}

// repeated .dwork.TaskMsg.Dep pred = 4;
inline int TaskMsg::_internal_pred_size() const {
  return pred_.size();
}
inline int TaskMsg::pred_size() const {
  return _internal_pred_size();
}
inline void TaskMsg::clear_pred() {
  pred_.Clear();
}
inline ::dwork::TaskMsg_Dep* TaskMsg::mutable_pred(int index) {
  // @@protoc_insertion_point(field_mutable:dwork.TaskMsg.pred)
  return pred_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >*
TaskMsg::mutable_pred() {
  // @@protoc_insertion_point(field_mutable_list:dwork.TaskMsg.pred)
  return &pred_;
}
inline const ::dwork::TaskMsg_Dep& TaskMsg::_internal_pred(int index) const {
  return pred_.Get(index);
}
inline const ::dwork::TaskMsg_Dep& TaskMsg::pred(int index) const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.pred)
  return _internal_pred(index);
}
inline ::dwork::TaskMsg_Dep* TaskMsg::_internal_add_pred() {
  return pred_.Add();
}
inline ::dwork::TaskMsg_Dep* TaskMsg::add_pred() {
  // @@protoc_insertion_point(field_add:dwork.TaskMsg.pred)
  return _internal_add_pred();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >&
TaskMsg::pred() const {
  // @@protoc_insertion_point(field_list:dwork.TaskMsg.pred)
  return pred_;
}

// repeated .dwork.TaskMsg.Dep succ = 5;
inline int TaskMsg::_internal_succ_size() const {
  return succ_.size();
}
inline int TaskMsg::succ_size() const {
  return _internal_succ_size();
}
inline void TaskMsg::clear_succ() {
  succ_.Clear();
}
inline ::dwork::TaskMsg_Dep* TaskMsg::mutable_succ(int index) {
  // @@protoc_insertion_point(field_mutable:dwork.TaskMsg.succ)
  return succ_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >*
TaskMsg::mutable_succ() {
  // @@protoc_insertion_point(field_mutable_list:dwork.TaskMsg.succ)
  return &succ_;
}
inline const ::dwork::TaskMsg_Dep& TaskMsg::_internal_succ(int index) const {
  return succ_.Get(index);
}
inline const ::dwork::TaskMsg_Dep& TaskMsg::succ(int index) const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.succ)
  return _internal_succ(index);
}
inline ::dwork::TaskMsg_Dep* TaskMsg::_internal_add_succ() {
  return succ_.Add();
}
inline ::dwork::TaskMsg_Dep* TaskMsg::add_succ() {
  // @@protoc_insertion_point(field_add:dwork.TaskMsg.succ)
  return _internal_add_succ();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_Dep >&
TaskMsg::succ() const {
  // @@protoc_insertion_point(field_list:dwork.TaskMsg.succ)
  return succ_;
}

// repeated .dwork.TaskMsg.LogMsg log = 6;
inline int TaskMsg::_internal_log_size() const {
  return log_.size();
}
inline int TaskMsg::log_size() const {
  return _internal_log_size();
}
inline void TaskMsg::clear_log() {
  log_.Clear();
}
inline ::dwork::TaskMsg_LogMsg* TaskMsg::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:dwork.TaskMsg.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_LogMsg >*
TaskMsg::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:dwork.TaskMsg.log)
  return &log_;
}
inline const ::dwork::TaskMsg_LogMsg& TaskMsg::_internal_log(int index) const {
  return log_.Get(index);
}
inline const ::dwork::TaskMsg_LogMsg& TaskMsg::log(int index) const {
  // @@protoc_insertion_point(field_get:dwork.TaskMsg.log)
  return _internal_log(index);
}
inline ::dwork::TaskMsg_LogMsg* TaskMsg::_internal_add_log() {
  return log_.Add();
}
inline ::dwork::TaskMsg_LogMsg* TaskMsg::add_log() {
  // @@protoc_insertion_point(field_add:dwork.TaskMsg.log)
  return _internal_add_log();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg_LogMsg >&
TaskMsg::log() const {
  // @@protoc_insertion_point(field_list:dwork.TaskMsg.log)
  return log_;
}

// -------------------------------------------------------------------

// QueryMsg

// required .dwork.QueryMsg.Type type = 1;
inline bool QueryMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QueryMsg::has_type() const {
  return _internal_has_type();
}
inline void QueryMsg::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::dwork::QueryMsg_Type QueryMsg::_internal_type() const {
  return static_cast< ::dwork::QueryMsg_Type >(type_);
}
inline ::dwork::QueryMsg_Type QueryMsg::type() const {
  // @@protoc_insertion_point(field_get:dwork.QueryMsg.type)
  return _internal_type();
}
inline void QueryMsg::_internal_set_type(::dwork::QueryMsg_Type value) {
  assert(::dwork::QueryMsg_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void QueryMsg::set_type(::dwork::QueryMsg_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dwork.QueryMsg.type)
}

// repeated .dwork.TaskMsg task = 2;
inline int QueryMsg::_internal_task_size() const {
  return task_.size();
}
inline int QueryMsg::task_size() const {
  return _internal_task_size();
}
inline void QueryMsg::clear_task() {
  task_.Clear();
}
inline ::dwork::TaskMsg* QueryMsg::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:dwork.QueryMsg.task)
  return task_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg >*
QueryMsg::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:dwork.QueryMsg.task)
  return &task_;
}
inline const ::dwork::TaskMsg& QueryMsg::_internal_task(int index) const {
  return task_.Get(index);
}
inline const ::dwork::TaskMsg& QueryMsg::task(int index) const {
  // @@protoc_insertion_point(field_get:dwork.QueryMsg.task)
  return _internal_task(index);
}
inline ::dwork::TaskMsg* QueryMsg::_internal_add_task() {
  return task_.Add();
}
inline ::dwork::TaskMsg* QueryMsg::add_task() {
  // @@protoc_insertion_point(field_add:dwork.QueryMsg.task)
  return _internal_add_task();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dwork::TaskMsg >&
QueryMsg::task() const {
  // @@protoc_insertion_point(field_list:dwork.QueryMsg.task)
  return task_;
}

// optional string name = 3;
inline bool QueryMsg::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryMsg::has_name() const {
  return _internal_has_name();
}
inline void QueryMsg::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryMsg::name() const {
  // @@protoc_insertion_point(field_get:dwork.QueryMsg.name)
  return _internal_name();
}
inline void QueryMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dwork.QueryMsg.name)
}
inline std::string* QueryMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dwork.QueryMsg.name)
  return _internal_mutable_name();
}
inline const std::string& QueryMsg::_internal_name() const {
  return name_.Get();
}
inline void QueryMsg::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryMsg::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dwork.QueryMsg.name)
}
inline void QueryMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dwork.QueryMsg.name)
}
inline void QueryMsg::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dwork.QueryMsg.name)
}
inline std::string* QueryMsg::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryMsg::release_name() {
  // @@protoc_insertion_point(field_release:dwork.QueryMsg.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dwork.QueryMsg.name)
}

// optional int32 n = 4;
inline bool QueryMsg::_internal_has_n() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QueryMsg::has_n() const {
  return _internal_has_n();
}
inline void QueryMsg::clear_n() {
  n_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryMsg::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryMsg::n() const {
  // @@protoc_insertion_point(field_get:dwork.QueryMsg.n)
  return _internal_n();
}
inline void QueryMsg::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  n_ = value;
}
inline void QueryMsg::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:dwork.QueryMsg.n)
}

// optional string location = 6;
inline bool QueryMsg::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryMsg::has_location() const {
  return _internal_has_location();
}
inline void QueryMsg::clear_location() {
  location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& QueryMsg::location() const {
  // @@protoc_insertion_point(field_get:dwork.QueryMsg.location)
  return _internal_location();
}
inline void QueryMsg::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:dwork.QueryMsg.location)
}
inline std::string* QueryMsg::mutable_location() {
  // @@protoc_insertion_point(field_mutable:dwork.QueryMsg.location)
  return _internal_mutable_location();
}
inline const std::string& QueryMsg::_internal_location() const {
  return location_.Get();
}
inline void QueryMsg::_internal_set_location(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryMsg::set_location(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dwork.QueryMsg.location)
}
inline void QueryMsg::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dwork.QueryMsg.location)
}
inline void QueryMsg::set_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dwork.QueryMsg.location)
}
inline std::string* QueryMsg::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryMsg::release_location() {
  // @@protoc_insertion_point(field_release:dwork.QueryMsg.location)
  if (!_internal_has_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryMsg::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dwork.QueryMsg.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dwork

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dwork::TaskMsg_State> : ::std::true_type {};
template <> struct is_proto_enum< ::dwork::QueryMsg_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TaskMsg_2eproto
